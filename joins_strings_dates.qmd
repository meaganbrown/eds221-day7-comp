---
title: "Joins and Strings and Dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

## Joins

```{r}
animals <- tibble::tribble(
  ~location,   ~species,  ~maturity,
  "lagoon",   "bobcat",    "adult",
   "bluff",   "coyote", "juvenile",
   "creek",      "fox",    "adult",
    "oaks", "squirrel", "juvenile",
   "bluff",   "bobcat",    "adult"
  )

sites <- tibble::tribble(
  ~location,      ~full_site_name, ~jurisdiction,
    "beach",       "Goleta Beach",     "SB City",
   "lagoon",        "UCSB Lagoon",        "UCSB",
    "bluff",       "Ellwood Mesa",     "SB City",
     "oaks", "Fremont Campground",        "USFS"
  )

```

### Full Join

```{r}
full_join_example <- full_join(animals, sites, 
                               by = "location")
```

### Left Join

```{r}
left_join_example <- left_join(animals, sites,
                               by = "location")
```

### Inner Join

```{r}
# Only joins what the data sets have in common
inner_join_example <- inner_join(animals, sites,
                                 by = "location")
```

```{r}
sites_2 <- sites %>% 
  rename(loc = location)
```

```{r}
#Example of joining with non matching names

nonmatching <- full_join(animals,
                         sites_2,
                         by = c("location" = "loc"))
```

### Semi Join

```{r}
semi_join_example <- semi_join(animals, sites,
                               by = "location")
```

### Anti Join

```{r}
#Only retains rows if they don't have a match
anti_join_example <- anti_join(animals, sites,
                               by = "location")
```

## Wrangling Refresher

```{r}
library(palmerpenguins)
```

```{r}
# Only include penguins at Biscoe and Dream islands
penguins_wrangled <- penguins %>% 
  filter(island %in% c("Biscoe",
                       "Dream")) %>% 
# Remove the year and sex variables
 select(-year, -sex) %>% 
# Add a new column called body_mass_kg, with penguin mass converted from grams to kilograms
  mutate(body_mass_kg = body_mass_g / 1000) %>% 
  # Rename the island variable to location
  rename("location" = island)
  
```

## Time

```{r}
#What is the ISO 8601 format for Feb 18 1996 at 8:34pm PST in SB
#1996-02-18T20:34-07:00UTC

#What is the ISO 8601 format for 12/5/2002 at 2:41am in SB
#2002-12-05T02:41-07:00UTC
```

## `Lubridate` (Dates + Times)

```{r}
library(lubridate)
```

```{r}
my_date <- "03-15-1998"
# mdy, ymd, dmy
class(my_date)

my_date <- lubridate::mdy(my_date)

my_date <- "11/7/2003"
lubridate::dmy(my_date)

my_date <- "08-Jun-1974"
lubridate::dmy(my_date)

my_date <- "19610518"
lubridate::ymd(my_date)
```

```{r}
lubridate::ymd("1942-08-30")

lubridate::mdy("09/22/84")
```

```{r}
library(lubridate)
time <- "2020-08-12 11:18"
time <- ymd_hm(time)
```

```{r}
with_tz(time, "American/Los_Angeles")

with_tz(time, "Europe/London")

with_tz(time, "Asia/Jakarta")
```

```{r}
my_time <- lubridate::ymd_hms(time)

month(my_time)
hour(my_time)
minute(my_time)
second(my_time)
```

```{r}
teddy_bday <- lubridate::ymd("20170615")

wday(teddy_bday, label = TRUE)

meagan_bday <- lubridate::ymd("19990831")
wday(meagan_bday, label = TRUE)
```

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67)

urchin_ymd <- urchin_counts %>% 
  mutate(date = mdy(date)) %>% 
  mutate(month = month(date),
         day = day(date),
         year = year(date))

day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)

time_length(time_interval, "year")
```

## `stringr`

```{r}
my_string <- "Teddy loves eating salmon and socks"

my_string %>% 
  str_detect("love")

my_string %>% 
  str_detect("pup")

my_string <- c("burrito", 
               "fish taco", 
               "taco salad")
my_string %>% 
  str_detect(my_string)
```

```{r}
skywalkers <- starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))

blue_eyes <- starwars %>% 
  filter(str_detect(eye_color, pattern = "blue"))
```

```{r}
firewalkers <- starwars %>% 
  mutate(name_2 = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

```{r}
feedback <- c("  I  ate    some  nachos", "Wednesday morning    ")

str_trim(feedback) #does not remove white space
str_squish(feedback) #removes white space

str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)
str_to_sentence(feedback)
```

```{r}
sw_robot <- starwars %>% 
  mutate(robot_status = case_when(
    species == "Droid" ~ "A ROBOT!!!",
    species == "Human" ~ "It's a human!",
    TRUE ~ "This is something else."
  ))
```

